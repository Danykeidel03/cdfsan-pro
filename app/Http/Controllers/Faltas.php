<?php

namespace App\Http\Controllers;

use Illuminate\Contracts\Foundation\Application;
use Illuminate\Contracts\View\Factory;
use Illuminate\Contracts\View\View;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Masterminds\HTML5\Exception;

class Faltas extends Jugadores
{
    /**
     * IndexAddPalabras constructor.
     */
    public function __construct()
    {
        $this->middleware('auth');
    }

    /**
     * Trata que acciÃ³n hay que realizar y la ejecuta
     * @return false|Application|Factory|View|string
     */
    public function index(Request $request)
    {
        switch ($request->input('accion')) {
            case "mostarEquipo":
                return $this->mostarEquipo($request->input('equipo'));
            case "mostarJugadoresEquipo":
                return $this->mostarJugadores($request->input('equipo'));
            case "addFalta":
                return $this->addFaltas($request->input('equipo'),$request->input('jugadoresFalta'),$request->input('fecha'));
            case "addNotas":
                return $this->addNotas($request->input('equipo'),$request->input('jugadoresFalta'),$request->input('fecha'),$request->input('nota'));
            default:
                return $this->consultar();
        }
    }

    /**
     * Obtiene los parametros de entrada y devuelve el view del controller
     * @return Application|Factory|View
     */
    private function consultar()
    {
        $ajaxUrl = url()->full();
        $arrViewData = [
            'ajaxUrl' => $ajaxUrl
        ];
        return view('faltas', $arrViewData);
    }

    /**
     * Consulta el contador de $equipos creadas en glosarios
     * @param Request $request
     * @return false|string Respuesta
     */
    public function mostarEquipo(string $equipo)
    {
        return parent::mostarEquipo($equipo); // TODO: Change the autogenerated stub

    }

    public function mostarJugadores($equipo)
    {
        return parent::mostarJugadores($equipo); // TODO: Change the autogenerated stub
    }

    public function addFaltas($equipo, $jugadores, $fecha){
        $arrayFaltas = explode(',', $jugadores);

        foreach ($arrayFaltas as $jugador){
            $insertado = DB::table('faltas_asistencia')->insert([
                'id_jugador' => $jugador,
                'fecha' => $fecha,
                'id_equipoSan' => $equipo
            ]);

            $faltasTotales = DB::table('jugadores')
                ->select('faltasTotales')
                ->where('id_jugador', $jugador)
                ->get()
                ->first();

            $faltasActuales = ($faltasTotales->faltasTotales);
            $faltasActuales = $faltasActuales + 1;

            DB::table('jugadores')
                ->where('id_jugador', '=', $jugador)
                ->update([
                    'faltasTotales' => $faltasActuales
                ]);


        }

    }


    public function addNotas($equipo, $jugadores, $fecha, $notas){
        $arrayFaltas = explode(',', $jugadores);
        $arrayNotas = json_decode($notas, true);

        foreach ($arrayFaltas as $jugador) {
            $notaJugador = null;
            foreach ($arrayNotas as $nota) {
                if (isset($nota['id']) && $nota['id'] == $jugador) {
                    $notaJugador = $nota;
                    break;
                }
            }

            if ($notaJugador) {
                if (isset($notaJugador['rendimiento']) && isset($notaJugador['actitud'])) {
                    $media = ($notaJugador['rendimiento'] + $notaJugador['actitud']) / 2;

                    $insertado = DB::table('notas_jugadores')->insert([
                        'id_jugador' => $jugador,
                        'fecha' => $fecha,
                        'id_equipoSan' => $equipo,
                        'nota_media' => $media,
                    ]);

                    $notasTotales = DB::table('notas_jugadores')
                        ->select('nota_media')
                        ->where('id_jugador', $jugador)
                        ->get();

                    $notaTotal = 0;

                    foreach ($notasTotales as $nota) {
                        $notaTotal = $notaTotal + $nota->nota_media;
                    }

                    $notaTotal = $notaTotal / count($notasTotales);


                    DB::table('jugadores')
                        ->where('id_jugador', '=', $jugador)
                        ->update([
                            'media_total' => $notaTotal
                        ]);
                }
            } else {
                $this->grabarLog("Jugador: $jugador, Sin notas asociadas.");
            }
        }
    }

}
