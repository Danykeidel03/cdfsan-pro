<?php

namespace App\Http\Controllers;

use Illuminate\Contracts\Foundation\Application;
use Illuminate\Contracts\View\Factory;
use Illuminate\Contracts\View\View;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Masterminds\HTML5\Exception;

class Faltas extends Jugadores
{
    /**
     * IndexAddPalabras constructor.
     */
    public function __construct()
    {
        $this->middleware('auth');
    }

    /**
     * Trata que acciÃ³n hay que realizar y la ejecuta
     * @return false|\Illuminate\Database\Query\Builder|string
     */
    public function index(Request $request)
    {
        switch ($request->input('accion')) {
            case "mostarEquipo":
                return $this->mostarEquipo($request->input('equipo'));
            case "getFechas":
                return $this->getFechasFaltas($request->input('equipo'));
            case "getNotasBasedOnDay":
                return $this->getNotasBasedOnDay($request->input('dia'));
            case "mostarJugadoresEquipo":
                return $this->mostarJugadores($request->input('equipo'));
            case "addFalta":
                return $this->addFaltas($request->input('equipo'),$request->input('jugadoresFalta'),$request->input('fecha'));
            case "addNotas":
                return $this->addNotas($request->input('equipo'),$request->input('jugadoresFalta'),$request->input('fecha'),$request->input('nota'));
            default:
                return $this->consultar();
        }
    }

    public function getNotasBasedOnDay($dia)
    {
        $jugadoresNotas = DB::table('notas_jugadores')
            ->join('jugadores', 'notas_jugadores.id_jugador', '=', 'jugadores.id_jugador')
            ->select('jugadores.nombre', 'notas_jugadores.nota_media')
            ->where('notas_jugadores.fecha', $dia)
            ->get();

        // Convertir los resultados a un array estructurado
        $resultado = $jugadoresNotas->map(function ($item) {
            return [
                'nombre' => $item->nombre,
                'nota' => $item->nota_media,
            ];
        })->toArray();

        // Retornar el resultado
        return $resultado;
    }


    public function getFechasFaltas($equipo){
        $fechasEquipo = DB::table('notas_jugadores')
            ->select('fecha')
            ->where('id_equipoSan', $equipo)
            ->distinct()
            ->get();

        $this->grabarLog($fechasEquipo);

        return $fechasEquipo;

    }

    /**
     * Obtiene los parametros de entrada y devuelve el view del controller
     * @return Application|Factory|View
     */
    private function consultar()
    {
        $ajaxUrl = url()->full();
        $arrViewData = [
            'ajaxUrl' => $ajaxUrl
        ];
        return view('faltas', $arrViewData);
    }

    /**
     * Consulta el contador de $equipos creadas en glosarios
     * @param Request $request
     * @return false|string Respuesta
     */
    public function mostarEquipo(string $equipo)
    {
        return parent::mostarEquipo($equipo); // TODO: Change the autogenerated stub

    }

    public function mostarJugadores($equipo)
    {
        return parent::mostarJugadores($equipo); // TODO: Change the autogenerated stub
    }

    public function addFaltas($equipo, $jugadores, $fecha){
        if($jugadores != ''){
            $arrayFaltas = explode(',', $jugadores);

            foreach ($arrayFaltas as $jugador){
                $this->grabarLog($jugador);
                $insertado = DB::table('faltas_asistencia')->insert([
                    'id_jugador' => $jugador,
                    'fecha' => $fecha,
                    'id_equipoSan' => $equipo
                ]);

                $faltasTotales = DB::table('jugadores')
                    ->select('faltasTotales')
                    ->where('id_jugador', $jugador)
                    ->get()
                    ->first();

                $faltasActuales = ($faltasTotales->faltasTotales);
                $faltasActuales = $faltasActuales + 1;

                DB::table('jugadores')
                    ->where('id_jugador', '=', $jugador)
                    ->update([
                        'faltasTotales' => $faltasActuales
                    ]);


            }

            return 'bien ejecutado';

        }else{
            return 'Sin registros';
        }

    }


    public function addNotas($equipo, $jugadores, $fecha, $notas){

        $arrayFaltas = json_decode($jugadores, true);
        $arrayNotas = json_decode($notas, true);

        foreach ($arrayNotas as $jugadorFinal){
            $idJugador = ($jugadorFinal['id']);
            $mediaNotas = ($jugadorFinal['rendimiento'] + $jugadorFinal['actitud']) / 2;

            $insertado = DB::table('notas_jugadores')->insert([
                'id_jugador' => $idJugador,
                'fecha' => $fecha,
                'id_equipoSan' => $equipo,
                'nota_media' => $mediaNotas,
            ]);

            $notasTotales = DB::table('notas_jugadores')
                ->select('nota_media')
                ->where('id_jugador', $idJugador)
                ->get();

            $notaTotal = 0;

            foreach ($notasTotales as $nota) {
                $notaTotal = $notaTotal + $nota->nota_media;
            }

            $notaTotal = $notaTotal / count($notasTotales);

            DB::table('jugadores')
                ->where('id_jugador', '=', $idJugador)
                ->update([
                    'media_total' => $notaTotal
                ]);
        }

        return 'Todo bien';

    }

}
